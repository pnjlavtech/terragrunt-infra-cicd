name: 'Terragrunt GitHub Actions'
on:
  push:
    branches:
      - "main"

permissions: read-all

env:
  AWS_ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }}
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  GH_PAT: ${{ secrets.GH_PAT }}
  tg_version: '0.53.2'
  tf_version: '1.5.7'
  TF_PLUGIN_CACHE_DIR: ${{ github.workspace }}/.terraform.d/plugin-cache
  working_dir: './non-prod/us-west-2/eks'
  # IS_GH: “TRUE”  # needed if there are private repos being used


jobs:
  # checks:
  #   runs-on: ubuntu-latest
  #   steps:
  #     - name: 'Checkout'
  #       uses: actions/checkout@main

  #     - name: Check terragrunt HCL
  #       uses: gruntwork-io/terragrunt-action@v2
  #       with:
  #         tf_version: ${{ env.tf_version }}
  #         tg_version: ${{ env.tg_version }}
  #         tg_dir: ${{ env.working_dir }}
  #         tg_command: 'hclfmt --terragrunt-check --terragrunt-diff'

  # tflint:
  #   runs-on: ubuntu-latest
  #   steps:
  #   # Checks-out your repository under $GITHUB_WORKSPACE, so follow-up steps can access it
  #   - name: Checkout source code
  #     uses: actions/checkout@v4

  #   - name: Create Terraform Plugin Cache Dir
  #     run: mkdir -p $TF_PLUGIN_CACHE_DIR

  #   - name: Terraform Plugin Cache
  #     uses: actions/cache@v4.0.1
  #     with:
  #       path: ${{ env.TF_PLUGIN_CACHE_DIR }}
  #       key: ${{ runner.os }}-terraform-plugin-cache-${{ hashFiles('**/.terraform.lock.hcl') }}

  #   - name: Setup TFLint
  #     uses: terraform-linters/setup-tflint@v4
  #     with:
  #       tflint_version: v0.50.3

  #   - name: Show version
  #     run: tflint --version

  #   - name: Init TFLint
  #     run: tflint --init
  #     env:
  #     #   # https://github.com/terraform-linters/tflint/blob/master/docs/user-guide/plugins.md#avoiding-rate-limiting
  #       GITHUB_TOKEN: ${{ env.GH_PAT }}

  #   - name: Run TFLint
  #     run: tflint -f json
 


  # plan:
  #   runs-on: ubuntu-latest
  #   needs: [ tflint ]
  #   steps:
  #     - name: Checkout
  #       uses: actions/checkout@main

  #     - name: Terraform Plugin Cache
  #       uses: actions/cache@v4.0.1
  #       with:
  #         path: ${{ env.TF_PLUGIN_CACHE_DIR }}
  #         key: ${{ runner.os }}-terraform-plugin-cache-${{ hashFiles('**/.terraform.lock.hcl') }}

  #     - name: Plan
  #       uses: gruntwork-io/terragrunt-action@v2
  #       env:
  #         AWS_ACCOUNT_ID: ${{ env.AWS_ACCOUNT_ID }} 
  #         TF_PLUGIN_CACHE_DIR: /github/workspace/.terraform.d/plugin-cache
  #         # configure git to use custom token to clone repository if it is a private repo.
  #         # INPUT_PRE_EXEC_1: |
  #         #   git config --global url."https://jazzlyj:${{secrets.GH_PAT}}@github.com".insteadOf "https://github.com"
  #       with:
  #         tf_version: ${{ env.tf_version }}
  #         tg_version: ${{ env.tg_version }}
  #         tg_dir: ${{ env.working_dir }}
  #         tg_command: 'run-all plan'



  # scan:
  #   permissions:
  #     contents: read # for actions/checkout to fetch code
  #     security-events: write # for github/codeql-action/upload-sarif to upload SARIF results
  #     actions: read # only required for a private repository by github/codeql-action/upload-sarif to get the Action run status
      
  #   runs-on: ubuntu-latest
  #   needs: [ plan ]

  #   steps:
  #     - name: Checkout
  #       uses: actions/checkout@v4

  #     - name: Checkov GitHub Action
  #       uses: bridgecrewio/checkov-action@v12
  #       with:
  #         # This will add both a CLI output to the console and create a results.sarif file
  #         output_format: cli,sarif
  #         output_file_path: console,results.sarif
        
  #     - name: Upload SARIF file
  #       uses: github/codeql-action/upload-sarif@v3
        
  #       # Results are generated only on a success or failure
  #       # this is required since GitHub by default won't run the next step
  #       # when the previous one has failed. Security checks that do not pass will 'fail'.
  #       # An alternative is to add `continue-on-error: true` to the previous step
  #       # Or 'soft_fail: true' to checkov.
  #       if: success() || failure()
  #       with:
  #         sarif_file: results.sarif


  # deploy:
  #   runs-on: ubuntu-latest
  #   needs: [ scan ]
  #   environment: 'non-prod'
  #   if: github.ref == 'refs/heads/main'
  #   steps:
  #     - name: 'Checkout'
  #       uses: actions/checkout@main

  #     - name: Terraform Plugin Cache
  #       uses: actions/cache@v4.0.1
  #       with:
  #         path: ${{ env.TF_PLUGIN_CACHE_DIR }}
  #         key: ${{ runner.os }}-terraform-plugin-cache-${{ hashFiles('**/.terraform.lock.hcl') }}

  #     - name: Deploy
  #       uses: gruntwork-io/terragrunt-action@v2
  #       env:
  #         AWS_ACCOUNT_ID: ${{ env.AWS_ACCOUNT_ID }} 
  #         TF_PLUGIN_CACHE_DIR: /github/workspace/.terraform.d/plugin-cache
  #       with:
  #         tf_version: ${{ env.tf_version }}
  #         tg_version: ${{ env.tg_version }}
  #         tg_dir: ${{ env.working_dir }}
  #         tg_command: 'run-all apply --terragrunt-log-level debug'


  destroy:
    runs-on: ubuntu-latest
    environment: 'non-prod'
    steps:
      - name: 'Checkout'
        uses: actions/checkout@main

      - name: Destroy
        uses: gruntwork-io/terragrunt-action@v2
        env:
          AWS_ACCOUNT_ID: ${{ env.AWS_ACCOUNT_ID }} 
        with:
          tf_version: ${{ env.tf_version }}
          tg_version: ${{ env.tg_version }}
          tg_dir: ${{ env.working_dir }}
          tg_command: 'destroy'



